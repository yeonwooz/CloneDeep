{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["function primaryTest() {\n  /*\n  primitives \uC6D0\uD615\uBCF4\uC874 \uD655\uC778\n  */\n  let original: any = null\n  let cloned = cloneDeep(original) \n  original = ''\n  console.assert(cloned === null, original, cloned) \n\n  original = undefined\n  cloned = cloneDeep(original) \n  original = ''\n  console.assert(cloned === undefined, original, cloned) \n\n  original = true\n  cloned = cloneDeep(original) \n  original = ''\n  console.assert(cloned === true, original, cloned) \n\n  original = false\n  cloned = cloneDeep(original) \n  original = ''\n  console.assert(cloned === false, original, cloned) \n\n  original = 1\n  cloned = cloneDeep(original) \n  original = ''\n  console.assert(cloned === 1, original, cloned) \n\n  original = '1'\n  cloned = cloneDeep(original) \n  original = ''\n  console.assert(cloned === '1', original, cloned) \n}\n\nfunction objectTest() {\n  /*\n  Object\n  */\n  let original: any = {\n    a:{\n      aa:\n        [{\n          aaa:{aaaa:'b', \n               bbbb: function(){\n                 console.log('bbb')\n                 return 'returning B'\n               },\n               cccc: ()=>{\n                 console.log('ccc')\n                 return 'returning C'\n               }}}, \n         100\n        ]}}\n  \n  let cloned = cloneDeep(original) \n  original.a.aa[0].aaa.bbbb = []\n  console.assert(cloned.a.aa[0].aaa.bbbb() === 'returning B')  // \uCF58\uC194\uB3C4 \uCD9C\uB825\uB41C\uB2E4\n\n  original = [\n    {a:{\n      aa:[{\n        aaa:{\n          aaaa:'b', \n          bbbb: function(){\n            console.log('bbb')\n            return 'returning B'\n          }, \n          cccc: ()=>{\n            console.log('ccc')\n            return 'returning C'\n          }\n        }\n      }]\n    }\n    }, \n    {b:1}\n  ]\n  cloned = cloneDeep(original) \n  original[0].a = []\n  console.assert(cloned[0].a.aa[0].aaa.bbbb() === 'returning B')  // \uCF58\uC194\uB3C4 \uCD9C\uB825\uB41C\uB2E4\n\n  original = Object\n  cloned = cloneDeep(original) \n  original['a'] = 1\n  console.assert(Object.keys(cloned).length === 0)\n\n  original = new Object\n  cloned = cloneDeep(original) \n  original['a'] = 1\n  console.assert(Object.keys(cloned).length === 0)\n}\n\nfunction functionTest() {\n   /*\n  Function\n  */\n  let original: any = function(){return {a:1}}\n  let cloned = cloneDeep(original)\n  original = null\n  console.assert(cloned()?.a === 1)\n\n  original = Function\n  cloned = cloneDeep(original)\n  original = null\n  console.assert(cloned?.length !== undefined)  // 1\n\n  original = new Function\n  cloned = cloneDeep(original)\n  original = null\n  console.assert(cloned?.length !== undefined)  // 0\n  \n  original = () => {\n    console.log(11111)\n    return 'arrow function'\n  }\n  cloned = cloneDeep(original)\n  original = null\n  console.assert(cloned() == 'arrow function')\n\n  original = {\n    method: () => {\n      console.log(11111)\n      return 'arrow function'\n    }\n  }\n  cloned = cloneDeep(original)\n  original.method = null\n  console.assert(cloned.method() == 'arrow function')\n}\n\nfunction DateTest() {\n  let original = Date  // function\n  let cloned = cloneDeep(original) \n  original = null\n  console.assert(cloned !== null)\n\n  original = Date()  // string\n  cloned = cloneDeep(original) \n  original = null\n  console.assert(cloned !== null)\n  \n  original = new Date  // object\n  cloned = cloneDeep(original) \n  original = null\n  console.assert(cloned !== null)\n\n  original = new Date()  // object\n  cloned = cloneDeep(original) \n  original = null\n  console.assert(cloned !== null)\n\n  original = {\n    a: {\n      key: Date\n    }\n  }\n  cloned = cloneDeep(original)\n  original.a.key = null\n  console.assert(cloned?.a?.key !== null)\n}\n\nfunction MapSetTest() {\n  let original = new Set [{a:{aa:[{aaa:{aaa:'b', bbb: function(){console.log('bbb')}, ccc: ()=>{console.log('ccc')}}}]}}, {b:1}]\n  let cloned = cloneDeep(original) \n \n  console.assert(original !== cloned, original, cloned)  \n}\n\n/*\n  Others\n  original = new Map\n  cloned = cloneDeep(original) \n  console.log(original, cloned)\n  console.assert(original !== cloned, original, cloned)\n\n  original = new Set [{a:{aa:[{aaa:{aaa:'b', bbb: function(){console.log('bbb')}, ccc: ()=>{console.log('ccc')}}}]}}, {b:1}]\n  cloned = cloneDeep(original) \n  console.log(original, cloned)\n  console.assert(original !== cloned, original, cloned)  \n  */\n\n\nfunction cloneDeep(value: any) {\n  if (value === null || value === undefined) {\n    return value\n  }\n\n  if (['string', 'number', 'boolean'].includes(typeof value)) {\n    return value\n  }\n\n  if (typeof value === 'function') {\n    if (value.assign) {\n      return {}\n    }\n    \n    return value\n  }\n  \n  if (typeof value === 'object' && value.length) {\n    if (Object.keys(value).length === 0) {\n      return {}\n    }\n    \n    const arr: any[] = []\n    value.length > 0 && value.forEach(element => {\n      const returnedValue = cloneDeep(element)\n      arr.push(returnedValue)\n    })\n\n    return arr\n  }\n  \n  let copiedValue: any = {}\n\n  if (typeof value === 'object') {\n    if (Object.keys(value).length === 0) {\n      return {}\n    }\n\n    for (const key in value) {\n      const returnedValue = cloneDeep(value[key])\n      copiedValue[key] = returnedValue\n    }\n\n    return copiedValue\n  }\n\n  return value\n}\n\n\nconst demo = (value: any) => {\n  let copiedValue: any = {}\n\n  if (typeof value === 'object') {\n    if (!Object.entries(value)) {\n      return value    \n    }   \n\n    const key = Object.entries(value)[0][0]\n    if (key) {\n      const pairedValue = demo(Object.entries(value)[0][1])\n      copiedValue[key] = pairedValue\n    }    \n  }\n\n  return copiedValue\n}\n\n\nconst testValue = {\n  a: {\n    b: {\n      c: [1,2,3]\n    }\n  }\n}\n\n//demo(testValue)\n\nprimaryTest()\nobjectTest()\nfunctionTest()\nDateTest()"],
  "mappings": "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",
  "names": []
}
